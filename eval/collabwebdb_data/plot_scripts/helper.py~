#!/usr/bin/python

import sqlite3
import sys
import os
import errno
import random
import gzip
import resource
import logging
import logging.handlers
import time
from optparse import OptionParser
import subprocess, threading
import re


class Point(object):
    def __init__(self,time,d):
        self.time = time
        self.d = d

input = open(sys.argv[1], "r")
line = input.readline()

serv_output = open(sys.argv[2], "w")
client_output = open(sys.argv[3], "w")

idx_start_cpu = line.index(": {")
str_start_cpu = line[idx_start_cpu+3:]
idx_end_cpu = str_start_cpu.index("},")
str_cpu = str_start_cpu[:idx_end_cpu]

line =   str_start_cpu[idx_end_cpu+3:]
idx_start_servstats = line.index(": {")
str_start_servstats = line[idx_start_servstats+3:]
idx_end_servstats = str_start_servstats.index("},")
str_servstats = str_start_servstats[:idx_end_servstats]

line = str_start_servstats[idx_end_servstats+3:]
idx_start_clientstats = line.index("counts\": {")
str_start_clientstats = line[idx_start_clientstats+10:]
idx_end_clientstats = str_start_clientstats.index("},")
str_clientstats = str_start_clientstats[:idx_end_clientstats]

print str_clientstats
sys.exit()

serv_points = str_servstats.split(", ")
min_time = 100000000000000
servLoad = []
for p in serv_points:
    time_qt = p.split(":")[0]
    time = float(time_qt.strip("\""))
    if time < min_time:
        min_time = time
    load = p.split(":")[1]
    serv_load = Point(time,load)
    servLoad.append(serv_load)

servLoad.sort(key=lambda x: x.time)
for p in servLoad:
    serv_output.write(str(p.time-min_time) + " " + str(p.d) + "\n")

