pegjs_sql = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

   //begin sql.pegjs-head.js from
   //https://raw.github.com/steveyen/sqld3/master/public/js/sql.pegjs-head.js
function append(arr, x) {
    arr[arr.length] = x;
    return arr;
}

function flatten(x, rejectSpace, acc) {
    acc = acc || [];
    if (x == null || x == undefined) {
      if (!rejectSpace) {
        return append(acc, x);
      }
      return acc;
    }
    if (x.length == undefined) { // Just an object, not a string or array.
      return append(acc, x);
    }
    if (rejectSpace &&
        ((x.length == 0) ||
         (typeof(x) == "string" &&
          x.match(/^\s*$/)))) {
      return acc;
    }
    if (typeof(x) == "string") {
      return append(acc, x);
    }
    for (var i = 0; i < x.length; i++) {
      flatten(x[i], rejectSpace, acc);
    }
    return acc;
}

function flatstr(x, rejectSpace, joinChar) {
    return flatten(x, rejectSpace, []).join(joinChar || '');
}

function filter(arr, x) {
    var acc = [];
    for (var i = 0; i < arr.length; i++) {
      if (arr[i] != x) {
        acc[length] = arr[i];
      }
    }
    return acc;
}

function nonempty(x) {             // Ex: nonempty("") == null;
    if (x == null || x.length > 0) { // Ex: nonempty(null) == null;
       return x;
    }
    return null;
}

function put_if_not_null(m, key, val) {
    if (val) {
      m[key] = val;
    }
    return m;
  }
  function merge(src, dst) {
    for (var k in src) {
      dst[k] = src[k];
    }
    return dst;
}
/// end sql.pegjs-head.js
    
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "sql_stmt_list": parse_sql_stmt_list,
        "sql_stmt": parse_sql_stmt,
        "alter_table_stmt": parse_alter_table_stmt,
        "analyze_stmt": parse_analyze_stmt,
        "attach_stmt": parse_attach_stmt,
        "begin_stmt": parse_begin_stmt,
        "commit_stmt": parse_commit_stmt,
        "rollback_stmt": parse_rollback_stmt,
        "savepoint_stmt": parse_savepoint_stmt,
        "release_stmt": parse_release_stmt,
        "create_index_stmt": parse_create_index_stmt,
        "indexed_column": parse_indexed_column,
        "create_table_stmt": parse_create_table_stmt,
        "column_def": parse_column_def,
        "type_name": parse_type_name,
        "column_constraint": parse_column_constraint,
        "signed_number": parse_signed_number,
        "table_constraint": parse_table_constraint,
        "foreign_key_clause": parse_foreign_key_clause,
        "conflict_clause": parse_conflict_clause,
        "create_trigger_stmt": parse_create_trigger_stmt,
        "create_view_stmt": parse_create_view_stmt,
        "create_virtual_table_stmt": parse_create_virtual_table_stmt,
        "delete_stmt": parse_delete_stmt,
        "delete_stmt_limited": parse_delete_stmt_limited,
        "detach_stmt": parse_detach_stmt,
        "drop_index_stmt": parse_drop_index_stmt,
        "drop_table_stmt": parse_drop_table_stmt,
        "drop_trigger_stmt": parse_drop_trigger_stmt,
        "drop_view_stmt": parse_drop_view_stmt,
        "value": parse_value,
        "expr": parse_expr,
        "call_function": parse_call_function,
        "raise_function": parse_raise_function,
        "literal_value": parse_literal_value,
        "numeric_literal": parse_numeric_literal,
        "insert_stmt": parse_insert_stmt,
        "pragma_stmt": parse_pragma_stmt,
        "pragma_value": parse_pragma_value,
        "reindex_stmt": parse_reindex_stmt,
        "select_stmt": parse_select_stmt,
        "select_core": parse_select_core,
        "select_result": parse_select_result,
        "join_source": parse_join_source,
        "single_source": parse_single_source,
        "join_op": parse_join_op,
        "join_constraint": parse_join_constraint,
        "ordering_term": parse_ordering_term,
        "compound_operator": parse_compound_operator,
        "update_stmt": parse_update_stmt,
        "update_stmt_limited": parse_update_stmt_limited,
        "qualified_table_name": parse_qualified_table_name,
        "table_ref": parse_table_ref,
        "column_ref": parse_column_ref,
        "comment_syntax": parse_comment_syntax,
        "dot": parse_dot,
        "comma": parse_comma,
        "semicolon": parse_semicolon,
        "minusminus": parse_minusminus,
        "minus": parse_minus,
        "plus": parse_plus,
        "lparen": parse_lparen,
        "rparen": parse_rparen,
        "star": parse_star,
        "newline": parse_newline,
        "anything_except_newline": parse_anything_except_newline,
        "comment_beg": parse_comment_beg,
        "comment_end": parse_comment_end,
        "anything_except_comment_end": parse_anything_except_comment_end,
        "string_literal": parse_string_literal,
        "escape_char": parse_escape_char,
        "nil": parse_nil,
        "whitespace": parse_whitespace,
        "whitespace1": parse_whitespace1,
        "unary_operator": parse_unary_operator,
        "binary_operator": parse_binary_operator,
        "digit": parse_digit,
        "equal": parse_equal,
        "name": parse_name,
        "bind_parameter": parse_bind_parameter,
        "CURRENT_TIME": parse_CURRENT_TIME,
        "CURRENT_DATE": parse_CURRENT_DATE,
        "CURRENT_TIMESTAMP": parse_CURRENT_TIMESTAMP,
        "end_of_input": parse_end_of_input,
        "ABORT": parse_ABORT,
        "ACTION": parse_ACTION,
        "ADD": parse_ADD,
        "AFTER": parse_AFTER,
        "ALL": parse_ALL,
        "ALTER": parse_ALTER,
        "ANALYZE": parse_ANALYZE,
        "AND": parse_AND,
        "AS": parse_AS,
        "ASC": parse_ASC,
        "ATTACH": parse_ATTACH,
        "AUTOINCREMENT": parse_AUTOINCREMENT,
        "BEFORE": parse_BEFORE,
        "BEGIN": parse_BEGIN,
        "BETWEEN": parse_BETWEEN,
        "BY": parse_BY,
        "CASCADE": parse_CASCADE,
        "CASE": parse_CASE,
        "CAST": parse_CAST,
        "CHECK": parse_CHECK,
        "COLLATE": parse_COLLATE,
        "COLUMN": parse_COLUMN,
        "COMMIT": parse_COMMIT,
        "CONFLICT": parse_CONFLICT,
        "CONSTRAINT": parse_CONSTRAINT,
        "CREATE": parse_CREATE,
        "CROSS": parse_CROSS,
        "DATABASE": parse_DATABASE,
        "DEFAULT": parse_DEFAULT,
        "DEFERRABLE": parse_DEFERRABLE,
        "DEFERRED": parse_DEFERRED,
        "DELETE": parse_DELETE,
        "DESC": parse_DESC,
        "DETACH": parse_DETACH,
        "DISTINCT": parse_DISTINCT,
        "DROP": parse_DROP,
        "E": parse_E,
        "EACH": parse_EACH,
        "ELSE": parse_ELSE,
        "END": parse_END,
        "ESCAPE": parse_ESCAPE,
        "EXCEPT": parse_EXCEPT,
        "EXCLUSIVE": parse_EXCLUSIVE,
        "EXISTS": parse_EXISTS,
        "EXPLAIN": parse_EXPLAIN,
        "FAIL": parse_FAIL,
        "FOR": parse_FOR,
        "FOREIGN": parse_FOREIGN,
        "FROM": parse_FROM,
        "GLOB": parse_GLOB,
        "GROUP": parse_GROUP,
        "HAVING": parse_HAVING,
        "IF": parse_IF,
        "IGNORE": parse_IGNORE,
        "IMMEDIATE": parse_IMMEDIATE,
        "IN": parse_IN,
        "INDEX": parse_INDEX,
        "INDEXED": parse_INDEXED,
        "INITIALLY": parse_INITIALLY,
        "INNER": parse_INNER,
        "INSERT": parse_INSERT,
        "INSTEAD": parse_INSTEAD,
        "INTERSECT": parse_INTERSECT,
        "INTO": parse_INTO,
        "IS": parse_IS,
        "ISNULL": parse_ISNULL,
        "JOIN": parse_JOIN,
        "KEY": parse_KEY,
        "LEFT": parse_LEFT,
        "LIKE": parse_LIKE,
        "LIMIT": parse_LIMIT,
        "MATCH": parse_MATCH,
        "NATURAL": parse_NATURAL,
        "NO": parse_NO,
        "NOT": parse_NOT,
        "NOTNULL": parse_NOTNULL,
        "NULL": parse_NULL,
        "OF": parse_OF,
        "OFFSET": parse_OFFSET,
        "ON": parse_ON,
        "OR": parse_OR,
        "ORDER": parse_ORDER,
        "OUTER": parse_OUTER,
        "PLAN": parse_PLAN,
        "PRAGMA": parse_PRAGMA,
        "PRIMARY": parse_PRIMARY,
        "QUERY": parse_QUERY,
        "RAISE": parse_RAISE,
        "REFERENCES": parse_REFERENCES,
        "REGEXP": parse_REGEXP,
        "REINDEX": parse_REINDEX,
        "RELEASE": parse_RELEASE,
        "RENAME": parse_RENAME,
        "REPLACE": parse_REPLACE,
        "RESTRICT": parse_RESTRICT,
        "ROLLBACK": parse_ROLLBACK,
        "ROW": parse_ROW,
        "SAVEPOINT": parse_SAVEPOINT,
        "SELECT": parse_SELECT,
        "SET": parse_SET,
        "TABLE": parse_TABLE,
        "TEMP": parse_TEMP,
        "TEMPORARY": parse_TEMPORARY,
        "THEN": parse_THEN,
        "TO": parse_TO,
        "TRANSACTION": parse_TRANSACTION,
        "TRIGGER": parse_TRIGGER,
        "UNION": parse_UNION,
        "UNIQUE": parse_UNIQUE,
        "UPDATE": parse_UPDATE,
        "USING": parse_USING,
        "VACUUM": parse_VACUUM,
        "VALUES": parse_VALUES,
        "VIEW": parse_VIEW,
        "VIRTUAL": parse_VIRTUAL,
        "WHEN": parse_WHEN,
        "WHERE": parse_WHERE
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "sql_stmt_list";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_sql_stmt_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_whitespace();
        if (result1 !== null) {
          result2 = parse_sql_stmt();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result3 = parse_whitespace();
            if (result3 !== null) {
              result4 = parse_semicolon();
              if (result4 !== null) {
                result1 = [result1, result2, result3, result4];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
        } else {
          result1 = null;
          pos = pos1;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            result1 = parse_whitespace();
            if (result1 !== null) {
              result2 = parse_sql_stmt();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = parse_whitespace();
                if (result3 !== null) {
                  result4 = parse_semicolon();
                  if (result4 !== null) {
                    result1 = [result1, result2, result3, result4];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, r) { return filter(flatten(r, true), ';') })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sql_stmt() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_EXPLAIN();
        if (result0 !== null) {
          pos3 = pos;
          result1 = parse_QUERY();
          if (result1 !== null) {
            result2 = parse_PLAN();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_select_stmt();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, explain, stmt) { return put_if_not_null(stmt, "explain", nonempty(flatstr(explain))) })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_alter_table_stmt() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_ALTER();
        if (result0 !== null) {
          result1 = parse_TABLE();
          if (result1 !== null) {
            result2 = parse_table_ref();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_RENAME();
          if (result1 !== null) {
            result2 = parse_TO();
            if (result2 !== null) {
              result3 = parse_name();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_ADD();
            if (result2 !== null) {
              result3 = parse_COLUMN();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_column_def();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_analyze_stmt() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_ANALYZE();
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 === null) {
            result1 = parse_name();
            if (result1 === null) {
              pos1 = pos;
              result1 = parse_name();
              if (result1 !== null) {
                result2 = parse_dot();
                if (result2 !== null) {
                  result3 = parse_name();
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attach_stmt() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = pos;
        result0 = parse_ATTACH();
        if (result0 !== null) {
          result1 = parse_DATABASE();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_expr();
            if (result2 !== null) {
              result3 = parse_AS();
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_begin_stmt() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_BEGIN();
        if (result0 !== null) {
          result1 = parse_DEFERRED();
          if (result1 === null) {
            result1 = parse_IMMEDIATE();
            if (result1 === null) {
              result1 = parse_EXCLUSIVE();
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TRANSACTION();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_commit_stmt() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_COMMIT();
        if (result0 === null) {
          result0 = parse_END();
        }
        if (result0 !== null) {
          result1 = parse_TRANSACTION();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_rollback_stmt() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_ROLLBACK();
        if (result0 !== null) {
          result1 = parse_TRANSACTION();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_TO();
            if (result2 !== null) {
              result3 = parse_SAVEPOINT();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_savepoint_stmt() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_SAVEPOINT();
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_release_stmt() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_RELEASE();
        if (result0 !== null) {
          result1 = parse_SAVEPOINT();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_create_index_stmt() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CREATE();
        if (result0 !== null) {
          result1 = parse_UNIQUE();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_INDEX();
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_IF();
              if (result3 !== null) {
                result4 = parse_NOT();
                if (result4 !== null) {
                  result5 = parse_EXISTS();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          pos2 = pos;
          result1 = parse_name();
          if (result1 !== null) {
            result2 = parse_dot();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result3 = parse_ON();
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result5 = parse_lparen();
                  if (result5 !== null) {
                    pos2 = pos;
                    result7 = parse_indexed_column();
                    if (result7 !== null) {
                      result8 = parse_comma();
                      if (result8 !== null) {
                        result7 = [result7, result8];
                      } else {
                        result7 = null;
                        pos = pos2;
                      }
                    } else {
                      result7 = null;
                      pos = pos2;
                    }
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        pos2 = pos;
                        result7 = parse_indexed_column();
                        if (result7 !== null) {
                          result8 = parse_comma();
                          if (result8 !== null) {
                            result7 = [result7, result8];
                          } else {
                            result7 = null;
                            pos = pos2;
                          }
                        } else {
                          result7 = null;
                          pos = pos2;
                        }
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result7 = parse_rparen();
                      if (result7 !== null) {
                        result1 = [result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result1 = null;
                        pos = pos1;
                      }
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_indexed_column() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_name();
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_COLLATE();
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_ASC();
            if (result2 === null) {
              result2 = parse_DESC();
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_create_table_stmt() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CREATE();
        if (result0 !== null) {
          result1 = parse_TEMP();
          if (result1 === null) {
            result1 = parse_TEMPORARY();
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TABLE();
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_IF();
              if (result3 !== null) {
                result4 = parse_NOT();
                if (result4 !== null) {
                  result5 = parse_EXISTS();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_table_ref();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_lparen();
            if (result2 !== null) {
              pos3 = pos;
              result4 = parse_column_def();
              if (result4 !== null) {
                result5 = parse_comma();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos3;
                }
              } else {
                result4 = null;
                pos = pos3;
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  pos3 = pos;
                  result4 = parse_column_def();
                  if (result4 !== null) {
                    result5 = parse_comma();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos3;
                    }
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                pos3 = pos;
                result5 = parse_comma();
                if (result5 !== null) {
                  result6 = parse_table_constraint();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos3 = pos;
                    result5 = parse_comma();
                    if (result5 !== null) {
                      result6 = parse_table_constraint();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_rparen();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_AS();
              if (result3 !== null) {
                result4 = parse_select_stmt();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_column_def() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = parse_name();
        if (result0 !== null) {
          result1 = parse_type_name();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_column_constraint();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_column_constraint();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_type_name() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        result1 = parse_name();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_name();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_lparen();
          if (result1 !== null) {
            result2 = parse_signed_number();
            if (result2 !== null) {
              result3 = parse_rparen();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_lparen();
            if (result1 !== null) {
              result2 = parse_signed_number();
              if (result2 !== null) {
                result3 = parse_comma();
                if (result3 !== null) {
                  result4 = parse_signed_number();
                  if (result4 !== null) {
                    result5 = parse_rparen();
                    if (result5 !== null) {
                      result1 = [result1, result2, result3, result4, result5];
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_column_constraint() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CONSTRAINT();
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_PRIMARY();
          if (result1 !== null) {
            result2 = parse_KEY();
            if (result2 !== null) {
              result3 = parse_ASC();
              if (result3 === null) {
                result3 = parse_DESC();
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_conflict_clause();
                if (result4 !== null) {
                  result5 = parse_AUTOINCREMENT();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result1 = [result1, result2, result3, result4, result5];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_NOT();
            if (result1 !== null) {
              result2 = parse_NULL();
              if (result2 !== null) {
                result3 = parse_conflict_clause();
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              result1 = parse_UNIQUE();
              if (result1 !== null) {
                result2 = parse_conflict_clause();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
              if (result1 === null) {
                pos1 = pos;
                result1 = parse_CHECK();
                if (result1 !== null) {
                  result2 = parse_lparen();
                  if (result2 !== null) {
                    result3 = parse_expr();
                    if (result3 !== null) {
                      result4 = parse_rparen();
                      if (result4 !== null) {
                        result1 = [result1, result2, result3, result4];
                      } else {
                        result1 = null;
                        pos = pos1;
                      }
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
                if (result1 === null) {
                  pos1 = pos;
                  result1 = parse_DEFAULT();
                  if (result1 !== null) {
                    result2 = parse_signed_number();
                    if (result2 === null) {
                      result2 = parse_literal_value();
                      if (result2 === null) {
                        pos2 = pos;
                        result2 = parse_lparen();
                        if (result2 !== null) {
                          result3 = parse_expr();
                          if (result3 !== null) {
                            result4 = parse_rparen();
                            if (result4 !== null) {
                              result2 = [result2, result3, result4];
                            } else {
                              result2 = null;
                              pos = pos2;
                            }
                          } else {
                            result2 = null;
                            pos = pos2;
                          }
                        } else {
                          result2 = null;
                          pos = pos2;
                        }
                      }
                    }
                    if (result2 !== null) {
                      result1 = [result1, result2];
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                  if (result1 === null) {
                    pos1 = pos;
                    result1 = parse_COLLATE();
                    if (result1 !== null) {
                      result2 = parse_name();
                      if (result2 !== null) {
                        result1 = [result1, result2];
                      } else {
                        result1 = null;
                        pos = pos1;
                      }
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                    if (result1 === null) {
                      result1 = parse_foreign_key_clause();
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_signed_number() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_plus();
        if (result0 === null) {
          result0 = parse_minus();
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_numeric_literal();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_table_constraint() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CONSTRAINT();
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos1 = pos;
          pos2 = pos;
          result1 = parse_PRIMARY();
          if (result1 !== null) {
            result2 = parse_KEY();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 === null) {
            result1 = parse_UNIQUE();
          }
          if (result1 !== null) {
            result2 = parse_lparen();
            if (result2 !== null) {
              pos2 = pos;
              result4 = parse_indexed_column();
              if (result4 !== null) {
                result5 = parse_comma();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  pos2 = pos;
                  result4 = parse_indexed_column();
                  if (result4 !== null) {
                    result5 = parse_comma();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_rparen();
                if (result4 !== null) {
                  result5 = parse_conflict_clause();
                  if (result5 !== null) {
                    result1 = [result1, result2, result3, result4, result5];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_CHECK();
            if (result1 !== null) {
              result2 = parse_lparen();
              if (result2 !== null) {
                result3 = parse_expr();
                if (result3 !== null) {
                  result4 = parse_rparen();
                  if (result4 !== null) {
                    result1 = [result1, result2, result3, result4];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              result1 = parse_FOREIGN();
              if (result1 !== null) {
                result2 = parse_KEY();
                if (result2 !== null) {
                  result3 = parse_lparen();
                  if (result3 !== null) {
                    pos2 = pos;
                    result5 = parse_name();
                    if (result5 !== null) {
                      result6 = parse_comma();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                    if (result5 !== null) {
                      result4 = [];
                      while (result5 !== null) {
                        result4.push(result5);
                        pos2 = pos;
                        result5 = parse_name();
                        if (result5 !== null) {
                          result6 = parse_comma();
                          if (result6 !== null) {
                            result5 = [result5, result6];
                          } else {
                            result5 = null;
                            pos = pos2;
                          }
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      }
                    } else {
                      result4 = null;
                    }
                    if (result4 !== null) {
                      result5 = parse_rparen();
                      if (result5 !== null) {
                        result6 = parse_foreign_key_clause();
                        if (result6 !== null) {
                          result1 = [result1, result2, result3, result4, result5, result6];
                        } else {
                          result1 = null;
                          pos = pos1;
                        }
                      } else {
                        result1 = null;
                        pos = pos1;
                      }
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_foreign_key_clause() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_REFERENCES();
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_lparen();
            if (result2 !== null) {
              pos3 = pos;
              result4 = parse_name();
              if (result4 !== null) {
                result5 = parse_comma();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos3;
                }
              } else {
                result4 = null;
                pos = pos3;
              }
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  pos3 = pos;
                  result4 = parse_name();
                  if (result4 !== null) {
                    result5 = parse_comma();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos3;
                    }
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_rparen();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          result2 = parse_ON();
          if (result2 !== null) {
            result3 = parse_DELETE();
            if (result3 === null) {
              result3 = parse_UPDATE();
            }
            if (result3 !== null) {
              pos2 = pos;
              result4 = parse_SET();
              if (result4 !== null) {
                result5 = parse_NULL();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
              if (result4 === null) {
                pos2 = pos;
                result4 = parse_SET();
                if (result4 !== null) {
                  result5 = parse_DEFAULT();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 === null) {
                  result4 = parse_CASCADE();
                  if (result4 === null) {
                    result4 = parse_RESTRICT();
                    if (result4 === null) {
                      pos2 = pos;
                      result4 = parse_NO();
                      if (result4 !== null) {
                        result5 = parse_ACTION();
                        if (result5 !== null) {
                          result4 = [result4, result5];
                        } else {
                          result4 = null;
                          pos = pos2;
                        }
                      } else {
                        result4 = null;
                        pos = pos2;
                      }
                    }
                  }
                }
              }
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          if (result2 === null) {
            pos1 = pos;
            result2 = parse_MATCH();
            if (result2 !== null) {
              result3 = parse_name();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos1 = pos;
              result2 = parse_ON();
              if (result2 !== null) {
                result3 = parse_DELETE();
                if (result3 === null) {
                  result3 = parse_UPDATE();
                }
                if (result3 !== null) {
                  pos2 = pos;
                  result4 = parse_SET();
                  if (result4 !== null) {
                    result5 = parse_NULL();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                  if (result4 === null) {
                    pos2 = pos;
                    result4 = parse_SET();
                    if (result4 !== null) {
                      result5 = parse_DEFAULT();
                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos2;
                      }
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                    if (result4 === null) {
                      result4 = parse_CASCADE();
                      if (result4 === null) {
                        result4 = parse_RESTRICT();
                        if (result4 === null) {
                          pos2 = pos;
                          result4 = parse_NO();
                          if (result4 !== null) {
                            result5 = parse_ACTION();
                            if (result5 !== null) {
                              result4 = [result4, result5];
                            } else {
                              result4 = null;
                              pos = pos2;
                            }
                          } else {
                            result4 = null;
                            pos = pos2;
                          }
                        }
                      }
                    }
                  }
                  if (result4 !== null) {
                    result2 = [result2, result3, result4];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
              if (result2 === null) {
                pos1 = pos;
                result2 = parse_MATCH();
                if (result2 !== null) {
                  result3 = parse_name();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }
            }
          } else {
            result1 = null;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_NOT();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_DEFERRABLE();
              if (result3 !== null) {
                pos2 = pos;
                result4 = parse_INITIALLY();
                if (result4 !== null) {
                  result5 = parse_DEFERRED();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 === null) {
                  pos2 = pos;
                  result4 = parse_INITIALLY();
                  if (result4 !== null) {
                    result5 = parse_IMMEDIATE();
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_conflict_clause() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_ON();
        if (result0 !== null) {
          result1 = parse_CONFLICT();
          if (result1 !== null) {
            result2 = parse_ROLLBACK();
            if (result2 === null) {
              result2 = parse_ABORT();
              if (result2 === null) {
                result2 = parse_FAIL();
                if (result2 === null) {
                  result2 = parse_IGNORE();
                  if (result2 === null) {
                    result2 = parse_REPLACE();
                  }
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      
      function parse_create_trigger_stmt() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CREATE();
        if (result0 !== null) {
          result1 = parse_TEMP();
          if (result1 === null) {
            result1 = parse_TEMPORARY();
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TRIGGER();
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_IF();
              if (result3 !== null) {
                result4 = parse_NOT();
                if (result4 !== null) {
                  result5 = parse_EXISTS();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          pos2 = pos;
          result1 = parse_name();
          if (result1 !== null) {
            result2 = parse_dot();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result3 = parse_BEFORE();
              if (result3 === null) {
                result3 = parse_AFTER();
                if (result3 === null) {
                  pos2 = pos;
                  result3 = parse_INSTEAD();
                  if (result3 !== null) {
                    result4 = parse_OF();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                }
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_DELETE();
            if (result2 === null) {
              result2 = parse_INSERT();
              if (result2 === null) {
                pos2 = pos;
                result2 = parse_UPDATE();
                if (result2 !== null) {
                  pos3 = pos;
                  result3 = parse_OF();
                  if (result3 !== null) {
                    pos4 = pos;
                    result5 = parse_name();
                    if (result5 !== null) {
                      result6 = parse_comma();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                    if (result5 !== null) {
                      result4 = [];
                      while (result5 !== null) {
                        result4.push(result5);
                        pos4 = pos;
                        result5 = parse_name();
                        if (result5 !== null) {
                          result6 = parse_comma();
                          if (result6 !== null) {
                            result5 = [result5, result6];
                          } else {
                            result5 = null;
                            pos = pos4;
                          }
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      }
                    } else {
                      result4 = null;
                    }
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos3;
                    }
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }
            }
            if (result2 !== null) {
              result3 = parse_ON();
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              pos2 = pos;
              result3 = parse_FOR();
              if (result3 !== null) {
                result4 = parse_EACH();
                if (result4 !== null) {
                  result5 = parse_ROW();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                result4 = parse_WHEN();
                if (result4 !== null) {
                  result5 = parse_expr();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                result4 = parse_BEGIN();
                if (result4 !== null) {
                  pos2 = pos;
                  result6 = parse_update_stmt();
                  if (result6 === null) {
                    result6 = parse_insert_stmt();
                    if (result6 === null) {
                      result6 = parse_delete_stmt();
                      if (result6 === null) {
                        result6 = parse_select_stmt();
                      }
                    }
                  }
                  if (result6 !== null) {
                    result7 = parse_semicolon();
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  } else {
                    result6 = null;
                    pos = pos2;
                  }
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      pos2 = pos;
                      result6 = parse_update_stmt();
                      if (result6 === null) {
                        result6 = parse_insert_stmt();
                        if (result6 === null) {
                          result6 = parse_delete_stmt();
                          if (result6 === null) {
                            result6 = parse_select_stmt();
                          }
                        }
                      }
                      if (result6 !== null) {
                        result7 = parse_semicolon();
                        if (result7 !== null) {
                          result6 = [result6, result7];
                        } else {
                          result6 = null;
                          pos = pos2;
                        }
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result6 = parse_END();
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_create_view_stmt() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CREATE();
        if (result0 !== null) {
          result1 = parse_TEMP();
          if (result1 === null) {
            result1 = parse_TEMPORARY();
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_VIEW();
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_IF();
              if (result3 !== null) {
                result4 = parse_NOT();
                if (result4 !== null) {
                  result5 = parse_EXISTS();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          pos2 = pos;
          result1 = parse_name();
          if (result1 !== null) {
            result2 = parse_dot();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result3 = parse_AS();
              if (result3 !== null) {
                result4 = parse_select_stmt();
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_create_virtual_table_stmt() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CREATE();
        if (result0 !== null) {
          result1 = parse_VIRTUAL();
          if (result1 !== null) {
            result2 = parse_TABLE();
            if (result2 !== null) {
              result3 = parse_table_ref();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_USING();
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_lparen();
              if (result3 !== null) {
                pos3 = pos;
                result5 = parse_name();
                if (result5 !== null) {
                  result6 = parse_comma();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos3 = pos;
                    result5 = parse_name();
                    if (result5 !== null) {
                      result6 = parse_comma();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_rparen();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_delete_stmt() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_DELETE();
        if (result0 !== null) {
          result1 = parse_FROM();
          if (result1 !== null) {
            result2 = parse_qualified_table_name();
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_WHERE();
              if (result3 !== null) {
                result4 = parse_expr();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_delete_stmt_limited() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        result0 = parse_DELETE();
        if (result0 !== null) {
          result1 = parse_FROM();
          if (result1 !== null) {
            result2 = parse_qualified_table_name();
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_WHERE();
              if (result3 !== null) {
                result4 = parse_expr();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos1 = pos;
                pos2 = pos;
                result4 = parse_ORDER();
                if (result4 !== null) {
                  result5 = parse_BY();
                  if (result5 !== null) {
                    pos3 = pos;
                    result7 = parse_ordering_term();
                    if (result7 !== null) {
                      result8 = parse_comma();
                      if (result8 !== null) {
                        result7 = [result7, result8];
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                    } else {
                      result7 = null;
                      pos = pos3;
                    }
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        pos3 = pos;
                        result7 = parse_ordering_term();
                        if (result7 !== null) {
                          result8 = parse_comma();
                          if (result8 !== null) {
                            result7 = [result7, result8];
                          } else {
                            result7 = null;
                            pos = pos3;
                          }
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  pos2 = pos;
                  result5 = parse_LIMIT();
                  if (result5 !== null) {
                    result6 = parse_expr();
                    if (result6 !== null) {
                      pos3 = pos;
                      result7 = parse_OFFSET();
                      if (result7 === null) {
                        result7 = parse_comma();
                      }
                      if (result7 !== null) {
                        result8 = parse_expr();
                        if (result8 !== null) {
                          result7 = [result7, result8];
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result5 = [result5, result6, result7];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                } else {
                  result4 = null;
                  pos = pos1;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_detach_stmt() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_DETACH();
        if (result0 !== null) {
          result1 = parse_DATABASE();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_drop_index_stmt() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_DROP();
        if (result0 !== null) {
          result1 = parse_INDEX();
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_IF();
            if (result2 !== null) {
              result3 = parse_EXISTS();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_name();
              if (result3 !== null) {
                result4 = parse_dot();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_drop_table_stmt() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_DROP();
        if (result0 !== null) {
          result1 = parse_TABLE();
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_IF();
            if (result2 !== null) {
              result3 = parse_EXISTS();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_table_ref();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_drop_trigger_stmt() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_DROP();
        if (result0 !== null) {
          result1 = parse_TRIGGER();
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_IF();
            if (result2 !== null) {
              result3 = parse_EXISTS();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_name();
              if (result3 !== null) {
                result4 = parse_dot();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_drop_view_stmt() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_DROP();
        if (result0 !== null) {
          result1 = parse_VIEW();
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_IF();
            if (result2 !== null) {
              result3 = parse_EXISTS();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_name();
              if (result3 !== null) {
                result4 = parse_dot();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_literal_value();
          if (result1 !== null) {
            result1 = (function(offset, x) { return { literal: x } })(pos2, result1);
          }
          if (result1 === null) {
            pos = pos2;
          }
          if (result1 === null) {
            pos2 = pos;
            result1 = parse_bind_parameter();
            if (result1 !== null) {
              result1 = (function(offset, b) { return { bind: b } })(pos2, result1);
            }
            if (result1 === null) {
              pos = pos2;
            }
            if (result1 === null) {
              pos2 = pos;
              pos3 = pos;
              result1 = parse_name();
              if (result1 !== null) {
                result2 = parse_dot();
                if (result2 !== null) {
                  result3 = parse_name();
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos3;
                  }
                } else {
                  result1 = null;
                  pos = pos3;
                }
              } else {
                result1 = null;
                pos = pos3;
              }
              if (result1 !== null) {
                result1 = (function(offset, t) { return { column: t[2], table: t[0] } })(pos2, result1);
              }
              if (result1 === null) {
                pos = pos2;
              }
              if (result1 === null) {
                pos2 = pos;
                result1 = parse_name();
                if (result1 !== null) {
                  result1 = (function(offset, c) { return { column: c } })(pos2, result1);
                }
                if (result1 === null) {
                  pos = pos2;
                }
                if (result1 === null) {
                  pos2 = pos;
                  result1 = parse_unary_operator();
                  if (result1 !== null) {
                    result2 = parse_expr();
                    if (result2 !== null) {
                      result1 = [result1, result2];
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                  if (result1 === null) {
                    result1 = parse_call_function();
                    if (result1 === null) {
                      pos2 = pos;
                      result1 = parse_whitespace();
                      if (result1 !== null) {
                        result2 = parse_lparen();
                        if (result2 !== null) {
                          result3 = parse_expr();
                          if (result3 !== null) {
                            result4 = parse_whitespace();
                            if (result4 !== null) {
                              result5 = parse_rparen();
                              if (result5 !== null) {
                                result1 = [result1, result2, result3, result4, result5];
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                          } else {
                            result1 = null;
                            pos = pos2;
                          }
                        } else {
                          result1 = null;
                          pos = pos2;
                        }
                      } else {
                        result1 = null;
                        pos = pos2;
                      }
                      if (result1 === null) {
                        pos2 = pos;
                        result1 = parse_CAST();
                        if (result1 !== null) {
                          result2 = parse_lparen();
                          if (result2 !== null) {
                            result3 = parse_expr();
                            if (result3 !== null) {
                              result4 = parse_AS();
                              if (result4 !== null) {
                                result5 = parse_type_name();
                                if (result5 !== null) {
                                  result6 = parse_rparen();
                                  if (result6 !== null) {
                                    result1 = [result1, result2, result3, result4, result5, result6];
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                          } else {
                            result1 = null;
                            pos = pos2;
                          }
                        } else {
                          result1 = null;
                          pos = pos2;
                        }
                        if (result1 === null) {
                          pos2 = pos;
                          pos3 = pos;
                          result1 = parse_NOT();
                          result1 = result1 !== null ? result1 : "";
                          if (result1 !== null) {
                            result2 = parse_EXISTS();
                            if (result2 !== null) {
                              result1 = [result1, result2];
                            } else {
                              result1 = null;
                              pos = pos3;
                            }
                          } else {
                            result1 = null;
                            pos = pos3;
                          }
                          result1 = result1 !== null ? result1 : "";
                          if (result1 !== null) {
                            result2 = parse_lparen();
                            if (result2 !== null) {
                              result3 = parse_select_stmt();
                              if (result3 !== null) {
                                result4 = parse_rparen();
                                if (result4 !== null) {
                                  result1 = [result1, result2, result3, result4];
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                          } else {
                            result1 = null;
                            pos = pos2;
                          }
                          if (result1 === null) {
                            pos2 = pos;
                            result1 = parse_CASE();
                            if (result1 !== null) {
                              result2 = parse_expr();
                              result2 = result2 !== null ? result2 : "";
                              if (result2 !== null) {
                                pos3 = pos;
                                result4 = parse_WHEN();
                                if (result4 !== null) {
                                  result5 = parse_expr();
                                  if (result5 !== null) {
                                    result6 = parse_THEN();
                                    if (result6 !== null) {
                                      result7 = parse_expr();
                                      if (result7 !== null) {
                                        result4 = [result4, result5, result6, result7];
                                      } else {
                                        result4 = null;
                                        pos = pos3;
                                      }
                                    } else {
                                      result4 = null;
                                      pos = pos3;
                                    }
                                  } else {
                                    result4 = null;
                                    pos = pos3;
                                  }
                                } else {
                                  result4 = null;
                                  pos = pos3;
                                }
                                if (result4 !== null) {
                                  result3 = [];
                                  while (result4 !== null) {
                                    result3.push(result4);
                                    pos3 = pos;
                                    result4 = parse_WHEN();
                                    if (result4 !== null) {
                                      result5 = parse_expr();
                                      if (result5 !== null) {
                                        result6 = parse_THEN();
                                        if (result6 !== null) {
                                          result7 = parse_expr();
                                          if (result7 !== null) {
                                            result4 = [result4, result5, result6, result7];
                                          } else {
                                            result4 = null;
                                            pos = pos3;
                                          }
                                        } else {
                                          result4 = null;
                                          pos = pos3;
                                        }
                                      } else {
                                        result4 = null;
                                        pos = pos3;
                                      }
                                    } else {
                                      result4 = null;
                                      pos = pos3;
                                    }
                                  }
                                } else {
                                  result3 = null;
                                }
                                if (result3 !== null) {
                                  pos3 = pos;
                                  result4 = parse_ELSE();
                                  if (result4 !== null) {
                                    result5 = parse_expr();
                                    if (result5 !== null) {
                                      result4 = [result4, result5];
                                    } else {
                                      result4 = null;
                                      pos = pos3;
                                    }
                                  } else {
                                    result4 = null;
                                    pos = pos3;
                                  }
                                  result4 = result4 !== null ? result4 : "";
                                  if (result4 !== null) {
                                    result5 = parse_END();
                                    if (result5 !== null) {
                                      result1 = [result1, result2, result3, result4, result5];
                                    } else {
                                      result1 = null;
                                      pos = pos2;
                                    }
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                            if (result1 === null) {
                              result1 = parse_raise_function();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v[1] })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_expr() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_value();
          if (result1 !== null) {
            result2 = parse_binary_operator();
            if (result2 !== null) {
              result3 = parse_expr();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 === null) {
            pos2 = pos;
            result1 = parse_value();
            if (result1 !== null) {
              result2 = parse_COLLATE();
              if (result2 !== null) {
                result3 = parse_name();
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 === null) {
              pos2 = pos;
              result1 = parse_value();
              if (result1 !== null) {
                result2 = parse_NOT();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse_LIKE();
                  if (result3 === null) {
                    result3 = parse_GLOB();
                    if (result3 === null) {
                      result3 = parse_REGEXP();
                      if (result3 === null) {
                        result3 = parse_MATCH();
                      }
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse_expr();
                    if (result4 !== null) {
                      pos3 = pos;
                      result5 = parse_ESCAPE();
                      if (result5 !== null) {
                        result6 = parse_expr();
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos3;
                        }
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                      result5 = result5 !== null ? result5 : "";
                      if (result5 !== null) {
                        result1 = [result1, result2, result3, result4, result5];
                      } else {
                        result1 = null;
                        pos = pos2;
                      }
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 === null) {
                pos2 = pos;
                result1 = parse_value();
                if (result1 !== null) {
                  result2 = parse_ISNULL();
                  if (result2 === null) {
                    result2 = parse_NOTNULL();
                    if (result2 === null) {
                      pos3 = pos;
                      result2 = parse_NOT();
                      if (result2 !== null) {
                        result3 = parse_NULL();
                        if (result3 !== null) {
                          result2 = [result2, result3];
                        } else {
                          result2 = null;
                          pos = pos3;
                        }
                      } else {
                        result2 = null;
                        pos = pos3;
                      }
                    }
                  }
                  if (result2 !== null) {
                    result1 = [result1, result2];
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
                if (result1 === null) {
                  pos2 = pos;
                  result1 = parse_value();
                  if (result1 !== null) {
                    result2 = parse_IS();
                    if (result2 !== null) {
                      result3 = parse_NOT();
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        result4 = parse_expr();
                        if (result4 !== null) {
                          result1 = [result1, result2, result3, result4];
                        } else {
                          result1 = null;
                          pos = pos2;
                        }
                      } else {
                        result1 = null;
                        pos = pos2;
                      }
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                  if (result1 === null) {
                    pos2 = pos;
                    result1 = parse_value();
                    if (result1 !== null) {
                      result2 = parse_NOT();
                      result2 = result2 !== null ? result2 : "";
                      if (result2 !== null) {
                        result3 = parse_BETWEEN();
                        if (result3 !== null) {
                          result4 = parse_expr();
                          if (result4 !== null) {
                            result5 = parse_AND();
                            if (result5 !== null) {
                              result6 = parse_expr();
                              if (result6 !== null) {
                                result1 = [result1, result2, result3, result4, result5, result6];
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                          } else {
                            result1 = null;
                            pos = pos2;
                          }
                        } else {
                          result1 = null;
                          pos = pos2;
                        }
                      } else {
                        result1 = null;
                        pos = pos2;
                      }
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                    if (result1 === null) {
                      pos2 = pos;
                      result1 = parse_value();
                      if (result1 !== null) {
                        result2 = parse_NOT();
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                          result3 = parse_IN();
                          if (result3 !== null) {
                            pos3 = pos;
                            result4 = parse_lparen();
                            if (result4 !== null) {
                              result5 = parse_select_stmt();
                              if (result5 === null) {
                                pos4 = pos;
                                result6 = parse_expr();
                                if (result6 !== null) {
                                  result7 = parse_comma();
                                  if (result7 !== null) {
                                    result6 = [result6, result7];
                                  } else {
                                    result6 = null;
                                    pos = pos4;
                                  }
                                } else {
                                  result6 = null;
                                  pos = pos4;
                                }
                                if (result6 !== null) {
                                  result5 = [];
                                  while (result6 !== null) {
                                    result5.push(result6);
                                    pos4 = pos;
                                    result6 = parse_expr();
                                    if (result6 !== null) {
                                      result7 = parse_comma();
                                      if (result7 !== null) {
                                        result6 = [result6, result7];
                                      } else {
                                        result6 = null;
                                        pos = pos4;
                                      }
                                    } else {
                                      result6 = null;
                                      pos = pos4;
                                    }
                                  }
                                } else {
                                  result5 = null;
                                }
                              }
                              result5 = result5 !== null ? result5 : "";
                              if (result5 !== null) {
                                result6 = parse_rparen();
                                if (result6 !== null) {
                                  result4 = [result4, result5, result6];
                                } else {
                                  result4 = null;
                                  pos = pos3;
                                }
                              } else {
                                result4 = null;
                                pos = pos3;
                              }
                            } else {
                              result4 = null;
                              pos = pos3;
                            }
                            if (result4 === null) {
                              result4 = parse_table_ref();
                            }
                            if (result4 !== null) {
                              result1 = [result1, result2, result3, result4];
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                          } else {
                            result1 = null;
                            pos = pos2;
                          }
                        } else {
                          result1 = null;
                          pos = pos2;
                        }
                      } else {
                        result1 = null;
                        pos = pos2;
                      }
                      if (result1 === null) {
                        result1 = parse_value();
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e) { return e[1]; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_call_function() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        result0 = parse_name();
        if (result0 !== null) {
          result1 = parse_whitespace();
          if (result1 !== null) {
            result2 = parse_lparen();
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_DISTINCT();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                result5 = parse_expr();
                if (result5 !== null) {
                  result6 = [];
                  pos3 = pos;
                  result7 = parse_whitespace();
                  if (result7 !== null) {
                    result8 = parse_comma();
                    if (result8 !== null) {
                      result9 = parse_expr();
                      if (result9 !== null) {
                        result7 = [result7, result8, result9];
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                    } else {
                      result7 = null;
                      pos = pos3;
                    }
                  } else {
                    result7 = null;
                    pos = pos3;
                  }
                  while (result7 !== null) {
                    result6.push(result7);
                    pos3 = pos;
                    result7 = parse_whitespace();
                    if (result7 !== null) {
                      result8 = parse_comma();
                      if (result8 !== null) {
                        result9 = parse_expr();
                        if (result9 !== null) {
                          result7 = [result7, result8, result9];
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                    } else {
                      result7 = null;
                      pos = pos3;
                    }
                  }
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = pos;
                    result5 = parse_expr();
                    if (result5 !== null) {
                      result6 = [];
                      pos3 = pos;
                      result7 = parse_whitespace();
                      if (result7 !== null) {
                        result8 = parse_comma();
                        if (result8 !== null) {
                          result9 = parse_expr();
                          if (result9 !== null) {
                            result7 = [result7, result8, result9];
                          } else {
                            result7 = null;
                            pos = pos3;
                          }
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                      while (result7 !== null) {
                        result6.push(result7);
                        pos3 = pos;
                        result7 = parse_whitespace();
                        if (result7 !== null) {
                          result8 = parse_comma();
                          if (result8 !== null) {
                            result9 = parse_expr();
                            if (result9 !== null) {
                              result7 = [result7, result8, result9];
                            } else {
                              result7 = null;
                              pos = pos3;
                            }
                          } else {
                            result7 = null;
                            pos = pos3;
                          }
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 === null) {
                pos1 = pos;
                result3 = parse_whitespace();
                if (result3 !== null) {
                  result4 = parse_star();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                } else {
                  result3 = null;
                  pos = pos1;
                }
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_whitespace();
                if (result4 !== null) {
                  result5 = parse_rparen();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_raise_function() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_RAISE();
        if (result0 !== null) {
          result1 = parse_lparen();
          if (result1 !== null) {
            result2 = parse_IGNORE();
            if (result2 === null) {
              pos1 = pos;
              result2 = parse_ROLLBACK();
              if (result2 === null) {
                result2 = parse_ABORT();
                if (result2 === null) {
                  result2 = parse_FAIL();
                }
              }
              if (result2 !== null) {
                result3 = parse_comma();
                if (result3 !== null) {
                  result4 = parse_string_literal();
                  if (result4 !== null) {
                    result2 = [result2, result3, result4];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            }
            if (result2 !== null) {
              result3 = parse_rparen();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_literal_value() {
        var result0;
        
        result0 = parse_numeric_literal();
        if (result0 === null) {
          result0 = parse_string_literal();
          if (result0 === null) {
            result0 = parse_string_literal();
            if (result0 === null) {
              result0 = parse_NULL();
              if (result0 === null) {
                result0 = parse_CURRENT_TIME();
                if (result0 === null) {
                  result0 = parse_CURRENT_DATE();
                  if (result0 === null) {
                    result0 = parse_CURRENT_TIMESTAMP();
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_numeric_literal() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result1 = parse_digit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_digit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos3 = pos;
          result1 = parse_dot();
          if (result1 !== null) {
            result3 = parse_digit();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_digit();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          result0 = parse_dot();
          if (result0 !== null) {
            result2 = parse_digit();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_digit();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_E();
          if (result1 !== null) {
            result2 = parse_plus();
            if (result2 === null) {
              result2 = parse_minus();
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result4 = parse_digit();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_digit();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { var x = flatstr(digits);
            if (x.indexOf('.') >= 0) {
              return parseFloat(x);
            }
            return parseInt(x);
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_insert_stmt() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_INSERT();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_OR();
          if (result1 !== null) {
            result2 = parse_ROLLBACK();
            if (result2 === null) {
              result2 = parse_ABORT();
              if (result2 === null) {
                result2 = parse_REPLACE();
                if (result2 === null) {
                  result2 = parse_FAIL();
                  if (result2 === null) {
                    result2 = parse_IGNORE();
                  }
                }
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_REPLACE();
        }
        if (result0 !== null) {
          result1 = parse_INTO();
          if (result1 !== null) {
            result2 = parse_table_ref();
            if (result2 !== null) {
              pos1 = pos;
              pos2 = pos;
              result3 = parse_lparen();
              if (result3 !== null) {
                pos3 = pos;
                result4 = parse_name();
                if (result4 !== null) {
                  result5 = [];
                  pos4 = pos;
                  result6 = parse_comma();
                  if (result6 !== null) {
                    result7 = parse_name();
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos4;
                    }
                  } else {
                    result6 = null;
                    pos = pos4;
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos4 = pos;
                    result6 = parse_comma();
                    if (result6 !== null) {
                      result7 = parse_name();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos4;
                      }
                    } else {
                      result6 = null;
                      pos = pos4;
                    }
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
                if (result4 !== null) {
                  result5 = parse_rparen();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                result4 = parse_VALUES();
                if (result4 !== null) {
                  result5 = parse_lparen();
                  if (result5 !== null) {
                    pos3 = pos;
                    result7 = parse_expr();
                    if (result7 !== null) {
                      result8 = parse_comma();
                      if (result8 !== null) {
                        result7 = [result7, result8];
                      } else {
                        result7 = null;
                        pos = pos3;
                      }
                    } else {
                      result7 = null;
                      pos = pos3;
                    }
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        pos3 = pos;
                        result7 = parse_expr();
                        if (result7 !== null) {
                          result8 = parse_comma();
                          if (result8 !== null) {
                            result7 = [result7, result8];
                          } else {
                            result7 = null;
                            pos = pos3;
                          }
                        } else {
                          result7 = null;
                          pos = pos3;
                        }
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result7 = parse_rparen();
                      if (result7 !== null) {
                        result4 = [result4, result5, result6, result7];
                      } else {
                        result4 = null;
                        pos = pos2;
                      }
                    } else {
                      result4 = null;
                      pos = pos2;
                    }
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 === null) {
                  result4 = parse_select_stmt();
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 === null) {
                pos1 = pos;
                result3 = parse_DEFAULT();
                if (result3 !== null) {
                  result4 = parse_VALUES();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                } else {
                  result3 = null;
                  pos = pos1;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_pragma_stmt() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_PRAGMA();
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_name();
          if (result1 !== null) {
            result2 = parse_dot();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_equal();
              if (result3 !== null) {
                result4 = parse_pragma_value();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 === null) {
                pos1 = pos;
                result3 = parse_lparen();
                if (result3 !== null) {
                  result4 = parse_pragma_value();
                  if (result4 !== null) {
                    result5 = parse_rparen();
                    if (result5 !== null) {
                      result3 = [result3, result4, result5];
                    } else {
                      result3 = null;
                      pos = pos1;
                    }
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                } else {
                  result3 = null;
                  pos = pos1;
                }
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_pragma_value() {
        var result0;
        
        result0 = parse_signed_number();
        if (result0 === null) {
          result0 = parse_name();
          if (result0 === null) {
            result0 = parse_string_literal();
          }
        }
        return result0;
      }
      
      function parse_reindex_stmt() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_REINDEX();
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 !== null) {
            pos1 = pos;
            result2 = parse_table_ref();
            if (result2 !== null) {
              result3 = parse_name();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_select_stmt() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_select_core();
        if (result0 !== null) {
          pos3 = pos;
          result1 = [];
          pos4 = pos;
          result2 = parse_compound_operator();
          if (result2 !== null) {
            result3 = parse_select_core();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos4;
            }
          } else {
            result2 = null;
            pos = pos4;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos4 = pos;
            result2 = parse_compound_operator();
            if (result2 !== null) {
              result3 = parse_select_core();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos4;
              }
            } else {
              result2 = null;
              pos = pos4;
            }
          }
          if (result1 !== null) {
            result1 = (function(offset, sc) { var acc = [];
                                      for (var i = 0; i < sc.length; i++) {
                                        acc[i] = merge(sc[i][0], sc[i][1]);
                                      }
                                      return acc;
                                    })(pos3, result1);
          }
          if (result1 === null) {
            pos = pos3;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_ORDER();
          if (result1 !== null) {
            result2 = parse_BY();
            if (result2 !== null) {
              result3 = parse_ordering_term();
              if (result3 !== null) {
                result4 = [];
                pos3 = pos;
                result5 = parse_whitespace();
                if (result5 !== null) {
                  result6 = parse_comma();
                  if (result6 !== null) {
                    result7 = parse_ordering_term();
                    if (result7 !== null) {
                      result5 = [result5, result6, result7];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos3 = pos;
                  result5 = parse_whitespace();
                  if (result5 !== null) {
                    result6 = parse_comma();
                    if (result6 !== null) {
                      result7 = parse_ordering_term();
                      if (result7 !== null) {
                        result5 = [result5, result6, result7];
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                }
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_LIMIT();
            if (result2 !== null) {
              result3 = parse_expr();
              if (result3 !== null) {
                pos3 = pos;
                result4 = parse_OFFSET();
                if (result4 === null) {
                  result4 = parse_comma();
                }
                if (result4 !== null) {
                  result5 = parse_expr();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, select_cores, order_by, limit) { var res = { stmt: "select",
                        select_cores: flatten(select_cores, true) };
            res = put_if_not_null(res, "order_by", nonempty(order_by));
            res = put_if_not_null(res, "limit", nonempty(limit));
            return res;
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_select_core() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SELECT();
        if (result0 !== null) {
          result1 = parse_DISTINCT();
          if (result1 === null) {
            result1 = parse_ALL();
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_select_result();
            if (result2 !== null) {
              pos3 = pos;
              result3 = [];
              pos4 = pos;
              result4 = parse_whitespace();
              if (result4 !== null) {
                result5 = parse_comma();
                if (result5 !== null) {
                  result6 = parse_select_result();
                  if (result6 !== null) {
                    result4 = [result4, result5, result6];
                  } else {
                    result4 = null;
                    pos = pos4;
                  }
                } else {
                  result4 = null;
                  pos = pos4;
                }
              } else {
                result4 = null;
                pos = pos4;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos4 = pos;
                result4 = parse_whitespace();
                if (result4 !== null) {
                  result5 = parse_comma();
                  if (result5 !== null) {
                    result6 = parse_select_result();
                    if (result6 !== null) {
                      result4 = [result4, result5, result6];
                    } else {
                      result4 = null;
                      pos = pos4;
                    }
                  } else {
                    result4 = null;
                    pos = pos4;
                  }
                } else {
                  result4 = null;
                  pos = pos4;
                }
              }
              if (result3 !== null) {
                result3 = (function(offset, cx) { var acc = [];
                                      for (var i = 0; i < cx.length; i++) {
                                        acc[i] = cx[i][2];
                                      }
                                      return acc;
                                    })(pos3, result3);
              }
              if (result3 === null) {
                pos = pos3;
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              pos3 = pos;
              result3 = parse_FROM();
              if (result3 !== null) {
                result4 = parse_join_source();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result3 = (function(offset, j) { return j ? j[1] : [] })(pos2, result3);
              }
              if (result3 === null) {
                pos = pos2;
              }
              if (result3 !== null) {
                pos2 = pos;
                pos3 = pos;
                result4 = parse_WHERE();
                if (result4 !== null) {
                  result5 = parse_expr();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result4 = (function(offset, e) { return e ? e[1] : [] })(pos2, result4);
                }
                if (result4 === null) {
                  pos = pos2;
                }
                if (result4 !== null) {
                  pos2 = pos;
                  pos3 = pos;
                  result5 = parse_GROUP();
                  if (result5 !== null) {
                    result6 = parse_BY();
                    if (result6 !== null) {
                      result7 = parse_ordering_term();
                      if (result7 !== null) {
                        result8 = [];
                        pos4 = pos;
                        result9 = parse_whitespace();
                        if (result9 !== null) {
                          result10 = parse_comma();
                          if (result10 !== null) {
                            result11 = parse_ordering_term();
                            if (result11 !== null) {
                              result9 = [result9, result10, result11];
                            } else {
                              result9 = null;
                              pos = pos4;
                            }
                          } else {
                            result9 = null;
                            pos = pos4;
                          }
                        } else {
                          result9 = null;
                          pos = pos4;
                        }
                        while (result9 !== null) {
                          result8.push(result9);
                          pos4 = pos;
                          result9 = parse_whitespace();
                          if (result9 !== null) {
                            result10 = parse_comma();
                            if (result10 !== null) {
                              result11 = parse_ordering_term();
                              if (result11 !== null) {
                                result9 = [result9, result10, result11];
                              } else {
                                result9 = null;
                                pos = pos4;
                              }
                            } else {
                              result9 = null;
                              pos = pos4;
                            }
                          } else {
                            result9 = null;
                            pos = pos4;
                          }
                        }
                        if (result8 !== null) {
                          pos4 = pos;
                          result9 = parse_HAVING();
                          if (result9 !== null) {
                            result10 = parse_expr();
                            if (result10 !== null) {
                              result9 = [result9, result10];
                            } else {
                              result9 = null;
                              pos = pos4;
                            }
                          } else {
                            result9 = null;
                            pos = pos4;
                          }
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result5 = [result5, result6, result7, result8, result9];
                          } else {
                            result5 = null;
                            pos = pos3;
                          }
                        } else {
                          result5 = null;
                          pos = pos3;
                        }
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result5 = (function(offset, e) { var acc = [];
                             if (e) { acc.push(e[2]); }
                             if (e[3]) { for (var i = 0; i < e[3].length; i++) { acc.push(e[3][i][2]); } }
                             if (e[4]) { acc.push(e[4]); }
                             return acc;
                           })(pos2, result5);
                  }
                  if (result5 === null) {
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, d, c, f, w, g) { c[1].unshift(c[0]);
            var res = { results: c[1] };
            res = put_if_not_null(res, "distinct", nonempty(flatstr(d)));
            res = put_if_not_null(res, "from", nonempty(f));
            res = put_if_not_null(res, "where", nonempty(w));
            res = put_if_not_null(res, "group_by", nonempty(g));
            return res;
          })(pos0, result0[1], result0[2], result0[3], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_select_result() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          result1 = parse_column_ref();
          if (result1 !== null) {
            pos4 = pos;
            pos5 = pos;
            result2 = parse_AS();
            if (result2 !== null) {
              result3 = parse_whitespace();
              if (result3 !== null) {
                result4 = parse_name();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos5;
                }
              } else {
                result2 = null;
                pos = pos5;
              }
            } else {
              result2 = null;
              pos = pos5;
            }
            if (result2 !== null) {
              result2 = (function(offset, a) { return { alias: a[2] } })(pos4, result2);
            }
            if (result2 === null) {
              pos = pos4;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos3;
            }
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            result1 = (function(offset, c) { return merge(c[1], c[0]) })(pos2, result1);
          }
          if (result1 === null) {
            pos = pos2;
          }
          if (result1 === null) {
            pos2 = pos;
            pos3 = pos;
            result1 = parse_name();
            if (result1 !== null) {
              result2 = parse_dot();
              if (result2 !== null) {
                result3 = parse_star();
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos3;
                }
              } else {
                result1 = null;
                pos = pos3;
              }
            } else {
              result1 = null;
              pos = pos3;
            }
            if (result1 !== null) {
              result1 = (function(offset, c) { return { table: c[0],
                                     column: '*' } })(pos2, result1);
            }
            if (result1 === null) {
              pos = pos2;
            }
            if (result1 === null) {
              pos2 = pos;
              result1 = parse_star();
              if (result1 !== null) {
                result1 = (function(offset) { return { column: '*' } })(pos2);
              }
              if (result1 === null) {
                pos = pos2;
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, r) { return r[1] })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_join_source() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          result1 = parse_single_source();
          if (result1 !== null) {
            result2 = [];
            pos2 = pos;
            result3 = parse_join_op();
            if (result3 !== null) {
              result4 = parse_whitespace();
              if (result4 !== null) {
                result5 = parse_single_source();
                if (result5 !== null) {
                  result6 = parse_join_constraint();
                  if (result6 !== null) {
                    result3 = [result3, result4, result5, result6];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = pos;
              result3 = parse_join_op();
              if (result3 !== null) {
                result4 = parse_whitespace();
                if (result4 !== null) {
                  result5 = parse_single_source();
                  if (result5 !== null) {
                    result6 = parse_join_constraint();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) { var acc = [s[1]];
            var rest = s[2];
            for (var i = 0; rest != null && i < rest.length; i++) {
              acc[acc.length] = merge(merge(rest[i][0], rest[i][2]), rest[i][3]);
            }
            return acc;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_single_source() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_name();
        if (result0 !== null) {
          result1 = parse_dot();
          if (result1 !== null) {
            result2 = parse_name();
            if (result2 !== null) {
              result3 = parse_AS();
              if (result3 !== null) {
                result4 = parse_whitespace1();
                if (result4 !== null) {
                  result5 = parse_name();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, x) { return { database: x[0], table: x[2], alias: x[5] } })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_name();
          if (result0 !== null) {
            result1 = parse_dot();
            if (result1 !== null) {
              result2 = parse_name();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, x) { return { database: x[0], table: x[2] } })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_name();
            if (result0 !== null) {
              result1 = parse_AS();
              if (result1 !== null) {
                result2 = parse_whitespace1();
                if (result2 !== null) {
                  result3 = parse_name();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, x) { return { table: x[0], alias: x[3] } })(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_name();
              if (result0 !== null) {
                result0 = (function(offset, x) { return { table: x } })(pos0, result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                pos2 = pos;
                pos3 = pos;
                result0 = parse_table_ref();
                if (result0 !== null) {
                  pos4 = pos;
                  pos5 = pos;
                  result1 = parse_AS();
                  if (result1 !== null) {
                    result2 = parse_whitespace1();
                    if (result2 !== null) {
                      result3 = parse_name();
                      if (result3 !== null) {
                        result1 = [result1, result2, result3];
                      } else {
                        result1 = null;
                        pos = pos5;
                      }
                    } else {
                      result1 = null;
                      pos = pos5;
                    }
                  } else {
                    result1 = null;
                    pos = pos5;
                  }
                  if (result1 !== null) {
                    result1 = (function(offset, a) { return { alias: a[2] } })(pos4, result1);
                  }
                  if (result1 === null) {
                    pos = pos4;
                  }
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos3;
                  }
                } else {
                  result0 = null;
                  pos = pos3;
                }
                if (result0 !== null) {
                  result0 = (function(offset, t) { return merge(t[1], t[0]) })(pos2, result0);
                }
                if (result0 === null) {
                  pos = pos2;
                }
                if (result0 !== null) {
                  pos2 = pos;
                  pos3 = pos;
                  result1 = parse_INDEXED();
                  if (result1 !== null) {
                    result2 = parse_BY();
                    if (result2 !== null) {
                      result3 = parse_whitespace();
                      if (result3 !== null) {
                        result4 = parse_name();
                        if (result4 !== null) {
                          result1 = [result1, result2, result3, result4];
                        } else {
                          result1 = null;
                          pos = pos3;
                        }
                      } else {
                        result1 = null;
                        pos = pos3;
                      }
                    } else {
                      result1 = null;
                      pos = pos3;
                    }
                  } else {
                    result1 = null;
                    pos = pos3;
                  }
                  if (result1 !== null) {
                    result1 = (function(offset, idx) { return { indexed_by: idx[3] } })(pos2, result1);
                  }
                  if (result1 === null) {
                    pos = pos2;
                  }
                  if (result1 === null) {
                    pos2 = pos;
                    pos3 = pos;
                    result1 = parse_NOT();
                    if (result1 !== null) {
                      result2 = parse_INDEXED();
                      if (result2 !== null) {
                        result1 = [result1, result2];
                      } else {
                        result1 = null;
                        pos = pos3;
                      }
                    } else {
                      result1 = null;
                      pos = pos3;
                    }
                    if (result1 !== null) {
                      result1 = (function(offset) { return { indexed_by: null } })(pos2);
                    }
                    if (result1 === null) {
                      pos = pos2;
                    }
                  }
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, s) { return merge(s[1], s[0]) })(pos0, result0);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result0 = parse_lparen();
                  if (result0 !== null) {
                    result1 = parse_select_stmt();
                    if (result1 !== null) {
                      result2 = parse_rparen();
                      if (result2 !== null) {
                        pos2 = pos;
                        pos3 = pos;
                        result3 = parse_AS();
                        if (result3 !== null) {
                          result4 = parse_whitespace();
                          if (result4 !== null) {
                            result5 = parse_name();
                            if (result5 !== null) {
                              result3 = [result3, result4, result5];
                            } else {
                              result3 = null;
                              pos = pos3;
                            }
                          } else {
                            result3 = null;
                            pos = pos3;
                          }
                        } else {
                          result3 = null;
                          pos = pos3;
                        }
                        if (result3 !== null) {
                          result3 = (function(offset, a) { return { alias: a[2] } })(pos2, result3);
                        }
                        if (result3 === null) {
                          pos = pos2;
                        }
                        result3 = result3 !== null ? result3 : "";
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, p) { return merge(p[3], p[1]) })(pos0, result0);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_lparen();
                    if (result0 !== null) {
                      result1 = parse_join_source();
                      if (result1 !== null) {
                        result2 = parse_rparen();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, j) { return j[1] })(pos0, result0);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_join_op() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          result1 = parse_comma();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "JOIN" })(pos1);
        }
        if (result0 === null) {
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          pos2 = pos;
          result0 = parse_NATURAL();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            pos3 = pos;
            result1 = parse_LEFT();
            if (result1 !== null) {
              result2 = parse_OUTER();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos3;
              }
            } else {
              result1 = null;
              pos = pos3;
            }
            if (result1 === null) {
              result1 = parse_INNER();
              if (result1 === null) {
                result1 = parse_CROSS();
              }
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_JOIN();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 !== null) {
            result0 = (function(offset, j) { return flatstr(j) })(pos1, result0);
          }
          if (result0 === null) {
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, r) { return { join_op: r } })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_join_constraint() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_ON();
        if (result0 !== null) {
          result1 = parse_expr();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_USING();
          if (result0 !== null) {
            result1 = parse_whitespace();
            if (result1 !== null) {
              result2 = parse_lparen();
              if (result2 !== null) {
                pos2 = pos;
                result3 = parse_whitespace();
                if (result3 !== null) {
                  result4 = parse_name();
                  if (result4 !== null) {
                    result5 = [];
                    pos3 = pos;
                    result6 = parse_whitespace();
                    if (result6 !== null) {
                      result7 = parse_comma();
                      if (result7 !== null) {
                        result8 = parse_whitespace();
                        if (result8 !== null) {
                          result9 = parse_name();
                          if (result9 !== null) {
                            result6 = [result6, result7, result8, result9];
                          } else {
                            result6 = null;
                            pos = pos3;
                          }
                        } else {
                          result6 = null;
                          pos = pos3;
                        }
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    while (result6 !== null) {
                      result5.push(result6);
                      pos3 = pos;
                      result6 = parse_whitespace();
                      if (result6 !== null) {
                        result7 = parse_comma();
                        if (result7 !== null) {
                          result8 = parse_whitespace();
                          if (result8 !== null) {
                            result9 = parse_name();
                            if (result9 !== null) {
                              result6 = [result6, result7, result8, result9];
                            } else {
                              result6 = null;
                              pos = pos3;
                            }
                          } else {
                            result6 = null;
                            pos = pos3;
                          }
                        } else {
                          result6 = null;
                          pos = pos3;
                        }
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    }
                    if (result5 !== null) {
                      result3 = [result3, result4, result5];
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
                if (result3 !== null) {
                  result4 = parse_whitespace();
                  if (result4 !== null) {
                    result5 = parse_rparen();
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result0 = (function(offset, r) { return { join_constraint: nonempty(r) } })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ordering_term() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_expr();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_COLLATE();
            if (result2 !== null) {
              result3 = parse_name();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_ASC();
              if (result3 === null) {
                result3 = parse_DESC();
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_compound_operator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_UNION();
        if (result0 !== null) {
          result1 = parse_ALL();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_INTERSECT();
          if (result0 === null) {
            result0 = parse_EXCEPT();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, o) { return { compound_operator: flatstr(o) } })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_update_stmt() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_UPDATE();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_OR();
          if (result1 !== null) {
            result2 = parse_ROLLBACK();
            if (result2 === null) {
              result2 = parse_ABORT();
              if (result2 === null) {
                result2 = parse_REPLACE();
                if (result2 === null) {
                  result2 = parse_FAIL();
                  if (result2 === null) {
                    result2 = parse_IGNORE();
                  }
                }
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_qualified_table_name();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_SET();
          if (result1 !== null) {
            pos2 = pos;
            pos3 = pos;
            result3 = parse_name();
            if (result3 !== null) {
              result4 = parse_equal();
              if (result4 !== null) {
                result5 = parse_expr();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
            } else {
              result3 = null;
              pos = pos3;
            }
            if (result3 !== null) {
              result4 = parse_comma();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                pos3 = pos;
                result3 = parse_name();
                if (result3 !== null) {
                  result4 = parse_equal();
                  if (result4 !== null) {
                    result5 = parse_expr();
                    if (result5 !== null) {
                      result3 = [result3, result4, result5];
                    } else {
                      result3 = null;
                      pos = pos3;
                    }
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                } else {
                  result3 = null;
                  pos = pos3;
                }
                if (result3 !== null) {
                  result4 = parse_comma();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_WHERE();
              if (result3 !== null) {
                result4 = parse_expr();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_update_stmt_limited() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_UPDATE();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_OR();
          if (result1 !== null) {
            result2 = parse_ROLLBACK();
            if (result2 === null) {
              result2 = parse_ABORT();
              if (result2 === null) {
                result2 = parse_REPLACE();
                if (result2 === null) {
                  result2 = parse_FAIL();
                  if (result2 === null) {
                    result2 = parse_IGNORE();
                  }
                }
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_qualified_table_name();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_SET();
          if (result1 !== null) {
            pos2 = pos;
            pos3 = pos;
            result3 = parse_name();
            if (result3 !== null) {
              result4 = parse_equal();
              if (result4 !== null) {
                result5 = parse_expr();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
            } else {
              result3 = null;
              pos = pos3;
            }
            if (result3 !== null) {
              result4 = parse_comma();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                pos3 = pos;
                result3 = parse_name();
                if (result3 !== null) {
                  result4 = parse_equal();
                  if (result4 !== null) {
                    result5 = parse_expr();
                    if (result5 !== null) {
                      result3 = [result3, result4, result5];
                    } else {
                      result3 = null;
                      pos = pos3;
                    }
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                } else {
                  result3 = null;
                  pos = pos3;
                }
                if (result3 !== null) {
                  result4 = parse_comma();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_WHERE();
              if (result3 !== null) {
                result4 = parse_expr();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            pos2 = pos;
            result2 = parse_ORDER();
            if (result2 !== null) {
              result3 = parse_BY();
              if (result3 !== null) {
                pos3 = pos;
                result5 = parse_ordering_term();
                if (result5 !== null) {
                  result6 = parse_comma();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    pos3 = pos;
                    result5 = parse_ordering_term();
                    if (result5 !== null) {
                      result6 = parse_comma();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos3;
                      }
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_LIMIT();
              if (result3 !== null) {
                result4 = parse_expr();
                if (result4 !== null) {
                  pos3 = pos;
                  result5 = parse_OFFSET();
                  if (result5 === null) {
                    result5 = parse_comma();
                  }
                  if (result5 !== null) {
                    result6 = parse_expr();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_qualified_table_name() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_table_ref();
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_INDEXED();
          if (result1 !== null) {
            result2 = parse_BY();
            if (result2 !== null) {
              result3 = parse_name();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_NOT();
            if (result1 !== null) {
              result2 = parse_INDEXED();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_table_ref() {
        var result0, result1;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        pos3 = pos;
        result0 = parse_name();
        if (result0 !== null) {
          result1 = parse_dot();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        if (result0 !== null) {
          result0 = (function(offset, d) { return { database: d[0] } })(pos2, result0);
        }
        if (result0 === null) {
          pos = pos2;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_name();
          if (result1 !== null) {
            result1 = (function(offset, x) { return { table: x } })(pos2, result1);
          }
          if (result1 === null) {
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, r) { return merge(r[1], r[0]) })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_column_ref() {
        var result0, result1;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        pos3 = pos;
        result0 = parse_name();
        if (result0 !== null) {
          result1 = parse_dot();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return { table: t[0] } })(pos2, result0);
        }
        if (result0 === null) {
          pos = pos2;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_name();
          if (result1 !== null) {
            result1 = (function(offset, x) { return { column: x } })(pos2, result1);
          }
          if (result1 === null) {
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, r) { return merge(r[1], r[0]) })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_comment_syntax() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_minusminus();
        if (result0 !== null) {
          result2 = parse_anything_except_newline();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_anything_except_newline();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_newline();
            if (result2 === null) {
              result2 = parse_end_of_input();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_comment_beg();
          if (result0 !== null) {
            result2 = parse_anything_except_comment_end();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_anything_except_comment_end();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_comment_end();
              if (result2 === null) {
                result2 = parse_end_of_input();
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_dot() {
        var result0;
        
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        return result0;
      }
      
      function parse_comma() {
        var result0;
        
        if (input.charCodeAt(pos) === 44) {
          result0 = ",";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        return result0;
      }
      
      function parse_semicolon() {
        var result0;
        
        if (input.charCodeAt(pos) === 59) {
          result0 = ";";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        return result0;
      }
      
      function parse_minusminus() {
        var result0;
        
        if (input.substr(pos, 2) === "--") {
          result0 = "--";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"--\"");
          }
        }
        return result0;
      }
      
      function parse_minus() {
        var result0;
        
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        return result0;
      }
      
      function parse_plus() {
        var result0;
        
        if (input.charCodeAt(pos) === 43) {
          result0 = "+";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        return result0;
      }
      
      function parse_lparen() {
        var result0;
        
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        return result0;
      }
      
      function parse_rparen() {
        var result0;
        
        if (input.charCodeAt(pos) === 41) {
          result0 = ")";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\")\"");
          }
        }
        return result0;
      }
      
      function parse_star() {
        var result0;
        
        if (input.charCodeAt(pos) === 42) {
          result0 = "*";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        return result0;
      }
      
      function parse_newline() {
        var result0;
        
        if (input.charCodeAt(pos) === 10) {
          result0 = "\n";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        return result0;
      }
      
      function parse_anything_except_newline() {
        var result0, result1;
        
        result0 = [];
        if (/^[^\n]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^\\n]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[^\n]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\n]");
            }
          }
        }
        return result0;
      }
      
      function parse_comment_beg() {
        var result0;
        
        if (input.substr(pos, 2) === "/*") {
          result0 = "/*";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        return result0;
      }
      
      function parse_comment_end() {
        var result0;
        
        if (input.substr(pos, 2) === "*/") {
          result0 = "*/";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*/\"");
          }
        }
        return result0;
      }
      
      function parse_anything_except_comment_end() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = [];
        if (input.length > pos) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.length > pos) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          if (input.substr(pos, 2) === "*/") {
            result1 = "*/";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos1;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_string_literal() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_escape_char();
          if (result2 === null) {
            if (/^[^"]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"]");
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_escape_char();
            if (result2 === null) {
              if (/^[^"]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\"]");
                }
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_escape_char() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 92) {
          result0 = "\\";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          if (input.length > pos) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_nil() {
        var result0;
        
        result0 = "";
        return result0;
      }
      
      function parse_whitespace() {
        var result0, result1;
        
        result0 = [];
        if (/^[ \t\n\r]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t\n\r]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t\\n\\r]");
            }
          }
        }
        return result0;
      }
      
      function parse_whitespace1() {
        var result0, result1;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t\n\r]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\n\\r]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_unary_operator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 45) {
            result1 = "-";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 43) {
              result1 = "+";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 126) {
                result1 = "~";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"~\"");
                }
              }
              if (result1 === null) {
                if (input.substr(pos, 3) === "NOT") {
                  result1 = "NOT";
                  pos += 3;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"NOT\"");
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, x) { return x[1] })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_binary_operator() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "||") {
            result1 = "||";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"||\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 42) {
              result1 = "*";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 47) {
                result1 = "/";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 37) {
                  result1 = "%";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"%\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 43) {
                    result1 = "+";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 45) {
                      result1 = "-";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.substr(pos, 2) === "<<") {
                        result1 = "<<";
                        pos += 2;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"<<\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.substr(pos, 2) === ">>") {
                          result1 = ">>";
                          pos += 2;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\">>\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 38) {
                            result1 = "&";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"&\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 124) {
                              result1 = "|";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"|\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.substr(pos, 2) === "<=") {
                                result1 = "<=";
                                pos += 2;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"<=\"");
                                }
                              }
                              if (result1 === null) {
                                if (input.substr(pos, 2) === ">=") {
                                  result1 = ">=";
                                  pos += 2;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\">=\"");
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 60) {
                                    result1 = "<";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"<\"");
                                    }
                                  }
                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 62) {
                                      result1 = ">";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\">\"");
                                      }
                                    }
                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 61) {
                                        result1 = "=";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"=\"");
                                        }
                                      }
                                      if (result1 === null) {
                                        if (input.substr(pos, 2) === "==") {
                                          result1 = "==";
                                          pos += 2;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"==\"");
                                          }
                                        }
                                        if (result1 === null) {
                                          if (input.substr(pos, 2) === "!=") {
                                            result1 = "!=";
                                            pos += 2;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"!=\"");
                                            }
                                          }
                                          if (result1 === null) {
                                            if (input.substr(pos, 2) === "<>") {
                                              result1 = "<>";
                                              pos += 2;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"<>\"");
                                              }
                                            }
                                            if (result1 === null) {
                                              if (input.substr(pos, 2) === "IS") {
                                                result1 = "IS";
                                                pos += 2;
                                              } else {
                                                result1 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"IS\"");
                                                }
                                              }
                                              if (result1 === null) {
                                                if (input.substr(pos, 6) === "IS NOT") {
                                                  result1 = "IS NOT";
                                                  pos += 6;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"IS NOT\"");
                                                  }
                                                }
                                                if (result1 === null) {
                                                  if (input.substr(pos, 2) === "IN") {
                                                    result1 = "IN";
                                                    pos += 2;
                                                  } else {
                                                    result1 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"IN\"");
                                                    }
                                                  }
                                                  if (result1 === null) {
                                                    if (input.substr(pos, 4) === "LIKE") {
                                                      result1 = "LIKE";
                                                      pos += 4;
                                                    } else {
                                                      result1 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"LIKE\"");
                                                      }
                                                    }
                                                    if (result1 === null) {
                                                      if (input.substr(pos, 4) === "GLOB") {
                                                        result1 = "GLOB";
                                                        pos += 4;
                                                      } else {
                                                        result1 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"GLOB\"");
                                                        }
                                                      }
                                                      if (result1 === null) {
                                                        if (input.substr(pos, 5) === "MATCH") {
                                                          result1 = "MATCH";
                                                          pos += 5;
                                                        } else {
                                                          result1 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"MATCH\"");
                                                          }
                                                        }
                                                        if (result1 === null) {
                                                          if (input.substr(pos, 6) === "REGEXP") {
                                                            result1 = "REGEXP";
                                                            pos += 6;
                                                          } else {
                                                            result1 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"REGEXP\"");
                                                            }
                                                          }
                                                          if (result1 === null) {
                                                            if (input.substr(pos, 3) === "AND") {
                                                              result1 = "AND";
                                                              pos += 3;
                                                            } else {
                                                              result1 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"AND\"");
                                                              }
                                                            }
                                                            if (result1 === null) {
                                                              if (input.substr(pos, 2) === "OR") {
                                                                result1 = "OR";
                                                                pos += 2;
                                                              } else {
                                                                result1 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"OR\"");
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, x) { return x[1] })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_digit() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_equal() {
        var result0;
        
        if (input.charCodeAt(pos) === 61) {
          result0 = "=";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        return result0;
      }
      
      function parse_name() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9_]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9_]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, str) { return str.join('') })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bind_parameter() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 63) {
          result0 = "?";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_name();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CURRENT_TIME() {
        var result0;
        
        if (input.substr(pos, 3) === "now") {
          result0 = "now";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"now\"");
          }
        }
        return result0;
      }
      
      function parse_CURRENT_DATE() {
        var result0;
        
        if (input.substr(pos, 3) === "now") {
          result0 = "now";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"now\"");
          }
        }
        return result0;
      }
      
      function parse_CURRENT_TIMESTAMP() {
        var result0;
        
        if (input.substr(pos, 3) === "now") {
          result0 = "now";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"now\"");
          }
        }
        return result0;
      }
      
      function parse_end_of_input() {
        var result0;
        
        result0 = "";
        return result0;
      }
      
      function parse_ABORT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "ABORT") {
            result1 = "ABORT";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ABORT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ACTION() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "ACTION") {
            result1 = "ACTION";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ACTION\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ADD() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "ADD") {
            result1 = "ADD";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ADD\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AFTER() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "AFTER") {
            result1 = "AFTER";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"AFTER\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ALL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "ALL") {
            result1 = "ALL";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ALL\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ALTER() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "ALTER") {
            result1 = "ALTER";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ALTER\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ANALYZE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "ANALYZE") {
            result1 = "ANALYZE";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ANALYZE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AND() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "AND") {
            result1 = "AND";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"AND\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AS() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "AS") {
            result1 = "AS";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"AS\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ASC() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "ASC") {
            result1 = "ASC";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ASC\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ATTACH() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "ATTACH") {
            result1 = "ATTACH";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ATTACH\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_AUTOINCREMENT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 13) === "AUTOINCREMENT") {
            result1 = "AUTOINCREMENT";
            pos += 13;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"AUTOINCREMENT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_BEFORE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "BEFORE") {
            result1 = "BEFORE";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"BEFORE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_BEGIN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "BEGIN") {
            result1 = "BEGIN";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"BEGIN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_BETWEEN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "BETWEEN") {
            result1 = "BETWEEN";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"BETWEEN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_BY() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "BY") {
            result1 = "BY";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"BY\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CASCADE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "CASCADE") {
            result1 = "CASCADE";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CASCADE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CASE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "CASE") {
            result1 = "CASE";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CASE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CAST() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "CAST") {
            result1 = "CAST";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CAST\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CHECK() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "CHECK") {
            result1 = "CHECK";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CHECK\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_COLLATE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "COLLATE") {
            result1 = "COLLATE";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"COLLATE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_COLUMN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "COLUMN") {
            result1 = "COLUMN";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"COLUMN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_COMMIT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "COMMIT") {
            result1 = "COMMIT";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"COMMIT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CONFLICT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "CONFLICT") {
            result1 = "CONFLICT";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CONFLICT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CONSTRAINT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 10) === "CONSTRAINT") {
            result1 = "CONSTRAINT";
            pos += 10;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CONSTRAINT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CREATE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "CREATE") {
            result1 = "CREATE";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CREATE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_CROSS() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "CROSS") {
            result1 = "CROSS";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CROSS\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DATABASE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "DATABASE") {
            result1 = "DATABASE";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DATABASE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DEFAULT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "DEFAULT") {
            result1 = "DEFAULT";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DEFAULT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DEFERRABLE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 10) === "DEFERRABLE") {
            result1 = "DEFERRABLE";
            pos += 10;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DEFERRABLE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DEFERRED() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "DEFERRED") {
            result1 = "DEFERRED";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DEFERRED\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DELETE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "DELETE") {
            result1 = "DELETE";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DELETE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DESC() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "DESC") {
            result1 = "DESC";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DESC\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DETACH() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "DETACH") {
            result1 = "DETACH";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DETACH\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DISTINCT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "DISTINCT") {
            result1 = "DISTINCT";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DISTINCT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DROP() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "DROP") {
            result1 = "DROP";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"DROP\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_E() {
        var result0;
        
        if (input.charCodeAt(pos) === 69) {
          result0 = "E";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"E\"");
          }
        }
        return result0;
      }
      
      function parse_EACH() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "EACH") {
            result1 = "EACH";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"EACH\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ELSE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "ELSE") {
            result1 = "ELSE";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ELSE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_END() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "END") {
            result1 = "END";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"END\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ESCAPE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "ESCAPE") {
            result1 = "ESCAPE";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ESCAPE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EXCEPT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "EXCEPT") {
            result1 = "EXCEPT";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"EXCEPT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EXCLUSIVE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "EXCLUSIVE") {
            result1 = "EXCLUSIVE";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"EXCLUSIVE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EXISTS() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "EXISTS") {
            result1 = "EXISTS";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"EXISTS\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EXPLAIN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "EXPLAIN") {
            result1 = "EXPLAIN";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"EXPLAIN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FAIL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "FAIL") {
            result1 = "FAIL";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"FAIL\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FOR() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "FOR") {
            result1 = "FOR";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"FOR\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FOREIGN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "FOREIGN") {
            result1 = "FOREIGN";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"FOREIGN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_FROM() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "FROM") {
            result1 = "FROM";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"FROM\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_GLOB() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "GLOB") {
            result1 = "GLOB";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"GLOB\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_GROUP() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "GROUP") {
            result1 = "GROUP";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"GROUP\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_HAVING() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "HAVING") {
            result1 = "HAVING";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"HAVING\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_IF() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "IF") {
            result1 = "IF";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"IF\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_IGNORE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "IGNORE") {
            result1 = "IGNORE";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"IGNORE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_IMMEDIATE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "IMMEDIATE") {
            result1 = "IMMEDIATE";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"IMMEDIATE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_IN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "IN") {
            result1 = "IN";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"IN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INDEX() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "INDEX") {
            result1 = "INDEX";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INDEX\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INDEXED() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "INDEXED") {
            result1 = "INDEXED";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INDEXED\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INITIALLY() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "INITIALLY") {
            result1 = "INITIALLY";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INITIALLY\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INNER() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "INNER") {
            result1 = "INNER";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INNER\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INSERT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "INSERT") {
            result1 = "INSERT";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INSERT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INSTEAD() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "INSTEAD") {
            result1 = "INSTEAD";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INSTEAD\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INTERSECT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "INTERSECT") {
            result1 = "INTERSECT";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INTERSECT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INTO() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "INTO") {
            result1 = "INTO";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"INTO\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_IS() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "IS") {
            result1 = "IS";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"IS\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ISNULL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "ISNULL") {
            result1 = "ISNULL";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ISNULL\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_JOIN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "JOIN") {
            result1 = "JOIN";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"JOIN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_KEY() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "KEY") {
            result1 = "KEY";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"KEY\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LEFT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "LEFT") {
            result1 = "LEFT";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"LEFT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LIKE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "LIKE") {
            result1 = "LIKE";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"LIKE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_LIMIT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "LIMIT") {
            result1 = "LIMIT";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"LIMIT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_MATCH() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "MATCH") {
            result1 = "MATCH";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"MATCH\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NATURAL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "NATURAL") {
            result1 = "NATURAL";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"NATURAL\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NO() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "NO") {
            result1 = "NO";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"NO\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NOT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "NOT") {
            result1 = "NOT";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"NOT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NOTNULL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "NOTNULL") {
            result1 = "NOTNULL";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"NOTNULL\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_NULL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "NULL") {
            result1 = "NULL";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"NULL\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_OF() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "OF") {
            result1 = "OF";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"OF\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_OFFSET() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "OFFSET") {
            result1 = "OFFSET";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"OFFSET\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ON() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "ON") {
            result1 = "ON";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ON\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_OR() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "OR") {
            result1 = "OR";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"OR\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ORDER() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "ORDER") {
            result1 = "ORDER";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ORDER\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_OUTER() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "OUTER") {
            result1 = "OUTER";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"OUTER\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_PLAN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "PLAN") {
            result1 = "PLAN";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"PLAN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_PRAGMA() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "PRAGMA") {
            result1 = "PRAGMA";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"PRAGMA\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_PRIMARY() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "PRIMARY") {
            result1 = "PRIMARY";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"PRIMARY\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_QUERY() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "QUERY") {
            result1 = "QUERY";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"QUERY\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_RAISE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "RAISE") {
            result1 = "RAISE";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"RAISE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_REFERENCES() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 10) === "REFERENCES") {
            result1 = "REFERENCES";
            pos += 10;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"REFERENCES\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_REGEXP() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "REGEXP") {
            result1 = "REGEXP";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"REGEXP\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_REINDEX() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "REINDEX") {
            result1 = "REINDEX";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"REINDEX\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_RELEASE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "RELEASE") {
            result1 = "RELEASE";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"RELEASE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_RENAME() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "RENAME") {
            result1 = "RENAME";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"RENAME\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_REPLACE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "REPLACE") {
            result1 = "REPLACE";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"REPLACE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_RESTRICT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "RESTRICT") {
            result1 = "RESTRICT";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"RESTRICT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ROLLBACK() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "ROLLBACK") {
            result1 = "ROLLBACK";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ROLLBACK\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ROW() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "ROW") {
            result1 = "ROW";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"ROW\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SAVEPOINT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "SAVEPOINT") {
            result1 = "SAVEPOINT";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"SAVEPOINT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SELECT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "SELECT") {
            result1 = "SELECT";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"SELECT\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SET() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 3) === "SET") {
            result1 = "SET";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"SET\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_TABLE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "TABLE") {
            result1 = "TABLE";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"TABLE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_TEMP() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "TEMP") {
            result1 = "TEMP";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"TEMP\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_TEMPORARY() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "TEMPORARY") {
            result1 = "TEMPORARY";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"TEMPORARY\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_THEN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "THEN") {
            result1 = "THEN";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"THEN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_TO() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "TO") {
            result1 = "TO";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"TO\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_TRANSACTION() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 11) === "TRANSACTION") {
            result1 = "TRANSACTION";
            pos += 11;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"TRANSACTION\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_TRIGGER() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "TRIGGER") {
            result1 = "TRIGGER";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"TRIGGER\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_UNION() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "UNION") {
            result1 = "UNION";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"UNION\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_UNIQUE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "UNIQUE") {
            result1 = "UNIQUE";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"UNIQUE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_UPDATE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "UPDATE") {
            result1 = "UPDATE";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"UPDATE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_USING() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "USING") {
            result1 = "USING";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"USING\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VACUUM() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "VACUUM") {
            result1 = "VACUUM";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"VACUUM\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VALUES() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "VALUES") {
            result1 = "VALUES";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"VALUES\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VIEW() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "VIEW") {
            result1 = "VIEW";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"VIEW\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VIRTUAL() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "VIRTUAL") {
            result1 = "VIRTUAL";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"VIRTUAL\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_WHEN() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 4) === "WHEN") {
            result1 = "WHEN";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"WHEN\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_WHERE() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace1();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "WHERE") {
            result1 = "WHERE";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"WHERE\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();